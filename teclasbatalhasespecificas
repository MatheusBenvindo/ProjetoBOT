from datetime import datetime, timedelta
import pyautogui
import pytesseract
import time
from PIL import Image
import schedule

from botrotinadiária import CapturaTela, ControleMouse, Agendador, Automacao

class Automacao:
    """Classe principal que orquestra a automação"""

    def __init__(self):
        self.controle_mouse = ControleMouse()
        self.captura_tela = CapturaTela()
        self.agendador = Agendador(self)

    def realizar_acao_18h(self):
        """Ação a ser realizada às 18h"""
        print("Executando ações programadas para as 18h")
        self.controle_mouse.ativar_visualizacao_janelas()
        screenshot = self.captura_tela.capturar_tela_inteira()
        texto = self.captura_tela.verificar_texto_na_imagem(screenshot)
        print(f"Texto na imagem: {texto}")

    def acao_diaria(self):
        """Ação a ser realizada periodicamente (exemplo às 12:50)"""
        print("Executando ações programadas para as 12:50")
        self.controle_mouse.ativar_visualizacao_janelas()

    def rotina_guardiao(self):
        """Rotina guardião que ativa janelas e realiza cliques de acordo com imagens"""
        self.controle_mouse.ativar_visualizacao_janelas()
        self.controle_mouse.clicar_imagem("maxicon.png", 0.8)
        self.controle_mouse.clicar_imagem("bauatv.png", 0.8)
        self.controle_mouse.clicar_imagem("korumaplat.png", 0.8)
        self.controle_mouse.clicar_imagem("entrar.png", 0.8)

    def acao_repetitiva_com_laco(self, hora_inicio, hora_fim, intervalo):
        """Executa ações repetitivas entre uma hora de início e uma hora de fim, em intervalos especificados"""
        print("Iniciando loop...")
        while datetime.now() < hora_fim:
            if datetime.now() >= hora_inicio:
                self.rotina_guardiao()
                time.sleep(intervalo)
                hora_atual = datetime.now()
                print("Hora Atual no Loop:", hora_atual)
        print(f"Loop encerrado em {hora_atual}")

    def iniciar_automacao(self):
        """Inicia a automação e começa o agendamento das tarefas"""
        self.agendador.agendar_acao()
        self.agendador.iniciar_agendamento()

    # Funções para diferentes cenários de batalha
    def teclas_batalha_guardiao(self):
        for _ in range(4):
            pyautogui.hotkey('2')
            pyautogui.sleep(2)
        
        for _ in range(4):
            pyautogui.hotkey('space')
            pyautogui.sleep(2)

        for _ in range(7):
            pyautogui.hotkey('2')
            pyautogui.sleep(2)

        for _ in range(7):
            pyautogui.hotkey('1')
            pyautogui.sleep(2)

        for _ in range(7):
            pyautogui.hotkey('5')

    def teclas_batalha_odin(self):
        for _ in range(4):
            pyautogui.hotkey('3')
            pyautogui.sleep(2)
        
        for _ in range(4):
            pyautogui.hotkey('space')
            pyautogui.sleep(2)

        for _ in range(7):
            pyautogui.hotkey('3')
            pyautogui.sleep(2)

        for _ in range(7):
            pyautogui.hotkey('4')
            pyautogui.sleep(2)

        for _ in range(7):
            pyautogui.hotkey('6')

    def teclas_batalha_thor(self):
        for _ in range(4):
            pyautogui.hotkey('4')
            pyautogui.sleep(2)
        
        for _ in range(4):
            pyautogui.hotkey('space')
            pyautogui.sleep(2)

        for _ in range(7):
            pyautogui.hotkey('4')
            pyautogui.sleep(2)

        for _ in range(7):
            pyautogui.hotkey('5')
            pyautogui.sleep(2)

        for _ in range(7):
            pyautogui.hotkey('6')

    def teclas_batalha_profissao_tita(self):
        for _ in range(4):
            pyautogui.hotkey('5')
            pyautogui.sleep(2)
        
        for _ in range(4):
            pyautogui.hotkey('space')
            pyautogui.sleep(2)

        for _ in range(7):
            pyautogui.hotkey('5')
            pyautogui.sleep(2)

        for _ in range(7):
            pyautogui.hotkey('6')
            pyautogui.sleep(2)

        for _ in range(7):
            pyautogui.hotkey('1')

    def teclas_batalha_profissao_avancada(self):
        for _ in range(4):
            pyautogui.hotkey('6')
            pyautogui.sleep(2)
        
        for _ in range(4):
            pyautogui.hotkey('space')
            pyautogui.sleep(2)

        for _ in range(7):
            pyautogui.hotkey('6')
            pyautogui.sleep(2)

        for _ in range(7):
            pyautogui.hotkey('7')
            pyautogui.sleep(2)

        for _ in range(7):
            pyautogui.hotkey('1')

    def teclas_batalha_theseu(self):
        for _ in range(4):
            pyautogui.hotkey('7')
            pyautogui.sleep(2)
        
        for _ in range(4):
            pyautogui.hotkey('space')
            pyautogui.sleep(2)

        for _ in range(7):
            pyautogui.hotkey('7')
            pyautogui.sleep(2)

        for _ in range(7):
            pyautogui.hotkey('8')
            pyautogui.sleep(2)

        for _ in range(7):
            pyautogui.hotkey('1')

if __name__ == "__main__":
    automacao = Automacao()
    mouse = ControleMouse()

    opcao_selecionada = verificar_classe_tita()

    mouse.clicar_imagem('mapa.png', 0.8)
    pyautogui.sleep(1)
    mouse.clicar_imagem('gloria.png', 0.8)
    pyautogui.sleep(5)
    mouse.clicar_imagem('gloria1.png', 0.8)
    pyautogui.sleep(2)
    
    imagens = ['gloria0.1.png', 'gloria0.2.png', 'gloria0.3.png', 'gloria0.4.png', 'gloria0.5.png', 'gloria0.6.png', 'gloria0.7.png', 'gloria0.8.png', 'gloria0.9.png', 'gloria1.1.png', 'gloria1.1.1.png', 'gloria1.1.2.png', 'gloria1.1.3.png', 'gloria1.1.4.png', 'gloria1.1.5.png']
    
    for imagem in imagens:
        img = mouse.clicar_imagem(imagem, 0.8)
        if img is not None:
            print(f"Imagem {imagem} encontrada e clicada.")
            break
        else:
            print(f"Imagem {imagem} não encontrada, tentando a próxima.")

    if img is None:
        print("Nenhuma das imagens foi encontrada. Saindo do loop.")
    else:
        pyautogui.sleep(1)
        mouse.localizar_imagem_na_area('gloria1.4.png', 'gloria1.2.png')
        pyautogui.sleep(3.5)

        # Executar a sequência de teclas com base na opção verificada
        automacao.teclas_batalha_guardiao() if opcao_selecionada == "contém titã" else automacao.teclas_batalha_profissao_tita()
