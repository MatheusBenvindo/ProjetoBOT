from datetime import datetime, timedelta
import pyautogui
import pytesseract
import time
from PIL import Image
import schedule

from botrotinadiária import CapturaTela, ControleMouse, Agendador, Automacao

# Função para verificar a presença ou ausência de um "titã" no jogo
def verificar_classe_tita():
    imagem_tita_presente = 'tita_presente.png'  # Imagem que indica a presença de um "titã"
    imagem_tita_ausente = 'tita_ausente.png'    # Imagem que indica a ausência de um "titã"

    # Verifica se a imagem que indica a presença de um "titã" está na tela
    tita_presente = pyautogui.locateOnScreen(imagem_tita_presente, confidence=0.8)
    if tita_presente is not None:
        print("Titã presente no jogo.")
        return "contém titã"

    # Verifica se a imagem que indica a ausência de um "titã" está na tela
    tita_ausente = pyautogui.locateOnScreen(imagem_tita_ausente, confidence=0.8)
    if tita_ausente is not None:
        print("Titã ausente no jogo.")
        return "não contém titã"

    # Se nenhuma das imagens for encontrada, assume que não contém titã por padrão
    print("Não foi possível determinar a presença do titã. Assumindo 'não contém titã'.")
    return "não contém titã"

# Função para executar a sequência de teclas com base na opção verificada
def executar_sequencia_teclas(opcao):
    if opcao == "contém titã":
        for _ in range(4):
            pyautogui.hotkey('2')
            pyautogui.sleep(2)
        
        for _ in range(4):
            pyautogui.hotkey('space')
            pyautogui.sleep(2)

        for _ in range(7):
            pyautogui.hotkey('2')
            pyautogui.sleep(2)

        for _ in range(7):
            pyautogui.hotkey('1')
            pyautogui.sleep(2)

        for _ in range(7):
            pyautogui.hotkey('5')
    else:
        for _ in range(4):
            pyautogui.hotkey('3')
            pyautogui.sleep(2)
        
        for _ in range(4):
            pyautogui.hotkey('space')
            pyautogui.sleep(2)

        for _ in range(7):
            pyautogui.hotkey('3')
            pyautogui.sleep(2)

        for _ in range(7):
            pyautogui.hotkey('4')
            pyautogui.sleep(2)

        for _ in range(7):
            pyautogui.hotkey('6')

if __name__ == "__main__":
    automacao = Automacao()
    mouse = ControleMouse()

    # Verifica a presença ou ausência de "titã"
    opcao_selecionada = verificar_classe_tita()

    mouse.clicar_imagem('mapa.png', 0.8)
    pyautogui.sleep(1)
    mouse.clicar_imagem('gloria.png', 0.8)
    pyautogui.sleep(5)
    mouse.clicar_imagem('gloria1.png', 0.8)
    pyautogui.sleep(2)
    
    imagens = ['gloria0.1.png', 'gloria0.2.png', 'gloria0.3.png', 'gloria0.4.png', 'gloria0.5.png', 'gloria0.6.png', 'gloria0.7.png', 'gloria0.8.png', 'gloria0.9.png', 'gloria1.1.png', 'gloria1.1.1.png', 'gloria1.1.2.png', 'gloria1.1.3.png', 'gloria1.1.4.png', 'gloria1.1.5.png']
    
    for imagem in imagens:
        img = mouse.clicar_imagem(imagem, 0.8)
        if img is not None:
            print(f"Imagem {imagem} encontrada e clicada.")
            break
        else:
            print(f"Imagem {imagem} não encontrada, tentando a próxima.")

    if img is None:
        print("Nenhuma das imagens foi encontrada. Saindo do loop.")
    else:
        pyautogui.sleep(1)
        mouse.localizar_imagem_na_area('gloria1.4.png', 'gloria1.2.png')
        pyautogui.sleep(3.5)

        # Executar a sequência de teclas com base na opção verificada
        executar_sequencia_teclas(opcao_selecionada)
