from datetime import datetime
import pyautogui
import pytesseract
import os
import time
from PIL import Image
import schedule

class CapturaTela:
    """Classe responsável pelas funções de captura de tela e OCR (Reconhecimento Óptico de Caracteres)"""

    def capturar_tela_inteira(self):
        """Captura a tela inteira e retorna uma imagem PIL."""
        screenshot = pyautogui.screenshot()  # Captura a tela inteira
        return screenshot

    def verificar_texto_na_imagem(self, screenshot):
        """Verifica o texto de uma imagem utilizando OCR (Tesseract)."""
        texto = pytesseract.image_to_string(screenshot)  # Realiza OCR na imagem
        return texto

    def encontrar_texto_na_imagem(self, screenshot, texto_busca):
        """
        Localiza a presença de um texto específico na tela usando OCR.
        Retorna True se o texto de busca for encontrado, caso contrário, False.
        """
        texto_extraido = pytesseract.image_to_string(screenshot)  # OCR na imagem
        print("Texto extraído da imagem:", texto_extraido)

        # Verifica se o texto de busca está no texto extraído
        if texto_busca.lower() in texto_extraido.lower():
            return True
        else:
            return False

class ControleMouse:
    """Classe responsável pelas ações de controle do mouse (clicar nas imagens, marcar checkboxes, etc.)"""

    def clicar_imagem(self, img_path, confidence=0.6):
        """Clica em uma imagem na tela com uma confiança especificada"""
        pyautogui.sleep(1)
        img = pyautogui.locateCenterOnScreen(img_path, confidence=confidence)

        if img is not None:
            pyautogui.sleep(1)
            pyautogui.click(img.x, img.y)
        else:
            print(f"Imagem {img_path} não encontrada na tela.")

    def ativar_visualizacao_janelas(self):
        """Ativa a visualização das janelas (Windows + Tab)"""
        pyautogui.hotkey('win', 'tab')
        pyautogui.sleep(1)

class Agendador:
    """Classe responsável por agendar e gerenciar as tarefas com o schedule"""

    def __init__(self, automacao):
        self.automacao = automacao

    def agendar_acao(self):
        # Agendar ações diárias ou específicas
        schedule.every().day.at("18:00").do(self.automacao.realizar_acao_18h)  # Exemplo de ação agendada para às 18h
        schedule.every().day.at("12:50").do(self.automacao.acao_diaria)  # Exemplo para realizar ações às 12:50

    def iniciar_agendamento(self):
        while True:
            schedule.run_pending()  # Executa as tarefas pendentes
            time.sleep(1)  # Espera 1 segundo antes de verificar novamente

class Automacao:
    """Classe principal que orquestra a automação"""

    def __init__(self):
        self.controle_mouse = ControleMouse()
        self.captura_tela = CapturaTela()
        self.agendador = Agendador(self)

    def realizar_acao_18h(self):
        """Ação a ser realizada às 18h"""
        print("Executando ações programadas para as 18h")
        self.controle_mouse.ativar_visualizacao_janelas()
        screenshot = self.captura_tela.capturar_tela_inteira()
        texto = self.captura_tela.verificar_texto_na_imagem(screenshot)
        print(f"Texto na imagem: {texto}")

    def acao_diaria(self):
        """Ação a ser realizada periodicamente (exemplo às 12:50)"""
        print("Executando ações programadas para as 12:50")
        self.controle_mouse.ativar_visualizacao_janelas()

    def rotina_guardiao(self):
        """Rotina guardião que ativa janelas e realiza cliques de acordo com imagens"""
        self.controle_mouse.ativar_visualizacao_janelas()
        self.controle_mouse.clicar_imagem("maxicon.png", 0.8)
        self.controle_mouse.clicar_imagem("bauatv.png", 0.8)
        self.controle_mouse.clicar_imagem("korumaplat.png", 0.8)
        self.controle_mouse.clicar_imagem("entrar.png", 0.8)

    def acao_repetitiva_com_laco(self, hora_inicio, hora_fim, intervalo):
        """Executa ações repetitivas entre uma hora de início e uma hora de fim, em intervalos especificados"""
        while datetime.now() < hora_fim:
            if datetime.now() >= hora_inicio:
                self.rotina_guardiao()
                time.sleep(intervalo)

    def iniciar_automacao(self):
        """Inicia a automação e começa o agendamento das tarefas"""
        self.agendador.agendar_acao()
        self.agendador.iniciar_agendamento()

if __name__ == "__main__":
    automacao = Automacao()
    
    # Exemplo de agendamento de uma tarefa repetitiva:
    hora_inicio = datetime.strptime("12:50", "%H:%M")  # Hora de início da ação repetitiva
    hora_fim = datetime.strptime("13:50", "%H:%M")     # Hora de fim da ação repetitiva
    intervalo = 600  # Intervalo de 10 minutos entre as ações
    automacao.acao_repetitiva_com_laco(hora_inicio, hora_fim, intervalo)

automacao.rotina_guardiao()

pyautogui.sleep(1)
# Inicializando a instância da classe CapturaTela
cap_tela = CapturaTela()

# Captura a tela inteira
screenshot = cap_tela.capturar_tela_inteira()

# Definindo o texto que você deseja buscar
texto_busca = "Birinci"

# Chamando a função encontrar_texto_na_imagem corretamente
texto_encontrado = cap_tela.encontrar_texto_na_imagem(screenshot, texto_busca)

# Verifica se o texto "Birinci" foi encontrado
if texto_encontrado:
    print("Texto 'Birinci' encontrado.")
    # Aqui você pode adicionar mais ações, como marcar o checkbox ou interagir com a interface
    # status_checkbox = ControleMouse.verificar_checkbox_por_texto(texto_encontrado, "birinci")
    # print("Status do checkbox:", status_checkbox)
else:
    print("Erro: Texto 'Birinci' não encontrado.")

# Definir as variáveis para a ação repetitiva com timer
hora_inicio1 = datetime.strptime("12:50", "%H:%M")  # Hora de início da ação
hora_fim1 = datetime.strptime("13:50", "%H:%M")     # Hora de fim da ação
intervalo1 = 600  # Intervalo de 10 minutos entre as ações

# Chama a função de ação repetitiva com timer
# automacao.acao_repetitiva_com_laco(hora_inicio1, hora_fim1, intervalo1)

# Comandos adicionais (fechar janelas, etc.)
for _ in range(2):
    pyautogui.hotkey("alt", "f4")  # Fecha as janelas abertas
for _ in range(3):
    pyautogui.hotkey("tab")  # Alterna entre as janelas abertas
pyautogui.hotkey("enter")  # Pressiona Enter
